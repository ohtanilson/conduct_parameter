using LinearAlgebra, Distributions
using Statistics, Random, MultivariateStats
using DataFrames, RData



"""
Given the simulation data generated by R, this julia file estimate the parameters based on the 2SLS method

The 2SLS is implemented by using the closed form expressions of the 2SLS estimator.
In the first stage, we regress instrument variables on the aggregate quantity (endogenous variable).
Given the first-stage estimation, regress the exogenous variables on the prices.

"""

function TwoSLS_estimation_R(data)

    T = size(data, 1)

    Q = data.Q
    W = data.w
    R = data.r
    Z = data.z
    P = data.P
    iv_w = data.iv_w
    iv_r = data.iv_r
    Y = data.y
    
    Z_demand = hcat(ones(T), Z, iv_w, iv_r, Y)
    Q_hat = Z_demand * pinv(Z_demand' * Z_demand)* (Z_demand' * Q)
    X_d = hcat(ones(T), Q_hat, Z .* Q_hat, Y)
    α_hat = pinv(X_d' * X_d) * (X_d' * P)

    #=    
    data_1st = DataFrame(Q = Q, Z = Z, IV_w = iv_w, IV_r = iv_r, Y = Y)
    iv_1st = lm(@formula(Q ~ Z + IV_w + IV_r + Y), data_1st, dropcollinear=false)

    Q_hat = predict(iv_1st)

    data_2nd = DataFrame(P = P, Q_hat = -Q_hat, Q_Z = -Z .* Q_hat, Y = Y)
    iv_2nd= lm(@formula(P ~ Q_hat + Q_Z + Y), data_2nd, dropcollinear=false)
    α_hat_GLM = coef(iv_2nd)
    =#

    # Supply side estimation 

    Z_supply = hcat(ones(T), W, R, Z, Y)
    Q_hat = Z_supply * pinv(Z_supply' * Z_supply) * Z_supply' *  Q
    X_s = hcat(ones(T), Q_hat, W, R, (α_hat[2] .+ α_hat[3] .* Z) .* Q_hat)
    γ_hat = pinv(X_s' * X_s) * (X_s' * P)

    θ_hat = γ_hat[end]

    return α_hat, γ_hat[1:end-1], θ_hat

end


function TwoSLS_estimation_simultaneous_R(data)

    T = size(data, 1)

    Q = data.Q
    w = data.w
    r = data.r
    z = data.z
    p = data.P
    iv_w = data.iv_w
    iv_r = data.iv_r
    Y = data.y

    iv = hcat(iv_w, iv_r)

    P = Vector{Float64}[]
    Z = Matrix{Float64}[]
    X = Matrix{Float64}[]

    for t = 1:T
        Z_td = vcat(1, z[t], Y[t], iv[t,:])
        Z_ts = vcat(1, z[t], w[t], r[t], Y[t])

        Z_t = [Z_td zeros(length(Z_td));  zeros(length(Z_ts)) Z_ts]'

        X_td = vcat(1, -Q[t],-z[t].*Q[t], Y[t])
        X_ts = vcat(1, Q[t], w[t], r[t], z[t].*Q[t])

        X_t = [X_td zeros(length(X_td)); zeros(length(X_ts)) X_ts]'

        push!(P, vcat(p[t], p[t]))
        push!(X, X_t)
        push!(Z, Z_t)
    end

    Z = reduce(vcat,(Z))
    X = reduce(vcat,(X))
    P = reshape(reduce(vcat,transpose.(P))', (T * 2))

    β_hat = inv(X' * Z * inv(Z'Z) * Z' * X) * (X' * Z * inv(Z'Z) * Z' * P)

    α_0_hat, α_1_hat, α_2_hat, α_3_hat = β_hat[1], β_hat[2], β_hat[3], β_hat[4]
    γ_0_hat, γ_2_hat, γ_3_hat = β_hat[5], β_hat[7], β_hat[8]

    θ_hat = β_hat[9]/α_2_hat
    γ_1_hat = β_hat[6] - θ_hat * α_1_hat

    #return α_hat, γ_hat[1:end-1], θ_hat
    return vcat(α_0_hat, α_1_hat, α_2_hat, α_3_hat), vcat(γ_0_hat, γ_1_hat, γ_2_hat, γ_3_hat), θ_hat
end


function simulation_2sls_R(filename, sample_size, sigma)


    data = load(filename)
    data = DataFrames.sort(data, [:group_id_k])

    α_est = Vector{Float64}[]
    γ_est = Vector{Float64}[]
    θ_est = Float64[]

    for s = 1:1000

        data_s = data[(s-1)*sample_size+1:s*sample_size,:]

        #α_est_s, γ_est_s, θ_est_s = TwoSLS_estimation_R(data_s)
        α_est_s, γ_est_s, θ_est_s = TwoSLS_estimation_simultaneous_R(data_s)

        push!(α_est, α_est_s)
        push!(γ_est, γ_est_s)
        push!(θ_est, θ_est_s)

    end

    α_est = reduce(vcat, α_est')
    γ_est = reduce(vcat, γ_est')
    θ_est = reduce(vcat, θ_est')

    result = DataFrame(
        σ = sigma,
        T = sample_size,
        α_0 = α_est[:,1],
        α_1 = α_est[:,2],
        α_2 = α_est[:,3],
        α_3 = α_est[:,end],
        γ_0 = γ_est[:,1],
        γ_1 = γ_est[:,2],
        γ_2 = γ_est[:,3],
        γ_3 = γ_est[:,4],
        θ = θ_est
    )

    return describe(result, :mean, :std, :min, :max, :median)

end


for sigma =  [0.001, 0.5, 1, 2] , sample_size = [50, 100, 200, 1000]
    filename_begin = "../conduct_parameter/R/output/data_linear_linear_n_"
    filename_end   = ".rds"

    if sigma == 1 || sigma == 2
        sigma = Int64(sigma)
    end

    filename = filename_begin*string(sample_size)*"_sigma_"*string(sigma)*filename_end

    result = simulation_2sls_R(filename, sample_size, sigma)

    display(result)
end